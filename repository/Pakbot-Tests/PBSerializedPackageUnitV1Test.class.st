Class {
	#name : #PBSerializedPackageUnitV1Test,
	#superclass : #TestCase,
	#category : #'Pakbot-Tests-Serialization'
}

{ #category : #tests }
PBSerializedPackageUnitV1Test >> serializedClass [
	^ PBSerializedPackage
]

{ #category : #tests }
PBSerializedPackageUnitV1Test >> testCanDeserializeDepedencyThatIsASymbol [
	| unit dict dependency |
	dict := Dictionary
		with: #name -> #Bar
		with: #dependencies -> #(#Project::Foo).
		
	unit := (self serializedClass fromDictionary: dict) asOngoingPackage.
	
	dependency := unit dependencies first.
	self assert: dependency targetedPackage equals: #Foo.
	self assert: dependency scope equals: #Project
]

{ #category : #tests }
PBSerializedPackageUnitV1Test >> testCanDeserializeDepedencyThatIsAnAssociation [	
	| unit dict dependency |
	dict := Dictionary 
		with: #name -> 'Foo'
		with: #dependencies -> {#Project::Foo -> #('=1.1')}.

	unit := (self serializedClass fromDictionary: dict) asOngoingPackage.
	
	dependency := unit dependencies first.
	self 
		assert: dependency targetedPackage 
		equals: #Foo.
	self 
		assert: dependency constraints size
		equals: 1.
	self 
		assert: dependency constraints first asString
		equals: '1.1'.
]

{ #category : #tests }
PBSerializedPackageUnitV1Test >> testGetEmptyCollectionWhenNoDependency [
	| unit dict |
	dict := Dictionary 
		with: #name -> 'Foo'
		with: #dependencies -> #().
	
	unit := (self serializedClass fromDictionary: dict) asOngoingPackage.
	
	self assert: unit dependencies isEmpty
]
